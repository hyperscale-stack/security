// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockUserPasswordSalt is an autogenerated mock type for the UserPasswordSalt type
type MockUserPasswordSalt struct {
	mock.Mock
}

// GetID provides a mock function with given fields:
func (_m *MockUserPasswordSalt) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPassword provides a mock function with given fields:
func (_m *MockUserPasswordSalt) GetPassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRoles provides a mock function with given fields:
func (_m *MockUserPasswordSalt) GetRoles() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetSalt provides a mock function with given fields:
func (_m *MockUserPasswordSalt) GetSalt() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUsername provides a mock function with given fields:
func (_m *MockUserPasswordSalt) GetUsername() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsCredentialsExpired provides a mock function with given fields:
func (_m *MockUserPasswordSalt) IsCredentialsExpired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsEnabled provides a mock function with given fields:
func (_m *MockUserPasswordSalt) IsEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsExpired provides a mock function with given fields:
func (_m *MockUserPasswordSalt) IsExpired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsLocked provides a mock function with given fields:
func (_m *MockUserPasswordSalt) IsLocked() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaltPassword provides a mock function with given fields: password, salt
func (_m *MockUserPasswordSalt) SaltPassword(password string, salt string) string {
	ret := _m.Called(password, salt)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(password, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
